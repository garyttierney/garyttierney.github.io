{"title":"Testing Linux kernel changes on Fedora with qemu","longTitle":"Testing Linux kernel changes on Fedora with qemu","categories":["fedora","selinux","linux","kernel","qemu"],"timestamp":1481942164,"body":"<p>I&#39;ve been interested in contributing to the kernel for a while now,\nand recently I&#39;ve been looking into the best workflow for doing that.  I&#39;d need\na quick way to build the kernel and test my changes.  Though, since I&#39;m mostly\ninterested in the SELinux subsystem I generally need a lot of userspace tools to\nuse with the kernel.</p>\n<p>Using mkosi from the systemd guys, I was able to quickly build a rootfs and boot\nmy compiled kernel with qemu.  This made it quite convenient to test my changes.\n<!---more--></p>\n<h3 id=\"step-1-getting-and-configuring-the-kernel\">Step 1.  Getting and configuring the kernel</h3>\n<p>The first step in testing the kernel, is actually checking it out and\nconfiguring it.  I took on a trivial issue from\n<a href=\"https://github.com/selinuxproject/selinux-kernel/issues/1\">https://github.com/selinuxproject/selinux-kernel/issues/1</a> so I could\nstart to familiarize myself with kernel code..</p>\n<p>The kernel tree that I&#39;m working with is from the SELinux subsystem, so I cloned\nthe repository from <a href=\"https://github.com/SELinuxProject/selinux-kernel.git\">https://github.com/SELinuxProject/selinux-kernel.git</a> and\nchecked out the &quot;next&quot; branch.</p>\n<p>Next I need to configure my kernel build.  If I run &quot;make menuconfig&quot; then by\ndefault I&#39;ll get a copy of my distributions kernel configuration if it is\navailable, which can be less than desirable due to the wide range of support\nthat distributions usually offer and the impact that&#39;ll have on my build times.</p>\n<p>Instead I want to create a minimal kernel configuration, which I can do using\nmake allnoconfig.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span>make&nbsp;allnoconfig</span></span></div></pre><p>Although, for simplicity here I&#39;m going to generate a config using the\nx86_64_defconfig optoin.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span>make&nbsp;x86_64_defconfig</span></span></div></pre><p>This gets me a reasonably small kernel image, and the build times aren&#39;t too bad\npast the initial build.</p>\n<h3 id=\"step-2-building-the-kernel\">Step 2.  Building the kernel</h3>\n<p>Now that I have the kernel configured I can kick off a build to test it out, and\nreduce the build times when I make some changes:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span>make&nbsp;-j8&nbsp;bzImage</span></span></div></pre><p>This could take quite a while, though I could reduce the build times quite a\nbit by stripping out unnecessary drivers and components from my kernel\nconfiguration.  Once it finishes I can test it with qemu and get it to boot\n(albeit with a kernel panic because there&#39;s no rootfs):</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>qemu-kvm&nbsp;-kernel&nbsp;arch/x86_64/boot/bzImage</span></span></div></pre><p>Once I <code>git am</code> the patches below, I can rebuild the kernel with <code>make -j8\nbzImage</code> and create a root filesystem to test out my changes with.</p>\n<p><em>patchset</em></p>\n<script\nsrc=\"https://gist.github.com/garyttierney/8d6dce7fde0383b85eae9bae99e9c420.js\"></script>\n\n<h3 id=\"step-3-creating-a-root-filesystem\">Step 3.  Creating a root filesystem</h3>\n<p>The mkosi tool mentioned at the beginning of this post is useful for a number of\nreasons.  The images it produces can be booted with systemd-nspawn, and it\ncan also output images in a number of formats, for a number of distributions.</p>\n<p>I&#39;ll be using it to create a GPT disk image, with a single ext4 partition\ncontaining a Fedora 25 root filesystem.  By default, mkosi builds Fedora images\nwithout an SELinux policy included so I&#39;ll need to create my own configuration\nfile for mkosi to load.</p>\n<p><em>mkosi.default</em></p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>[Distribution]</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Distribution=fedora</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Release=25</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>[Output]</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Format=raw_gpt</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>[Packages]</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Cache=mkosi.cache/</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Packages=libselinux-utils&nbsp;selinux-policy&nbsp;selinux-policy-targeted</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;policycoreutils&nbsp;procps-ng&nbsp;findutils&nbsp;setools-console</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>[Validation]</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>Password=myrootpw</span></span></div></pre><p>As you probably gathered, this will create a Fedora 25 image with the given list\nof packages and set the root password to &quot;myrootpw&quot;.  The cache option makes the\npackage manager retain downloaded packages for later runs.  This is quite useful\nif there&#39;s an issue in the build or we make additions. If I create this as is I\ncan boot it with systemd-nspawn and play around in the container:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span>mkosi</span></span></div><div class=\"line\"><span class=\"source shell\"><span>systemd-nspawn&nbsp;-bi&nbsp;image.raw</span></span></div></pre><p>Though I&#39;ll also need to relabel the system, and I&#39;ve hit a bug which is\npreventing selinux-autorelabel from starting (systemd wants to relabel files it\nhas no access to before systemd-autorelabel starts).  So I&#39;ll create a post-install\nscript which will put the system into permissive mode and instruct the system to\nrelabel on next boot.</p>\n<p><em>mkosi.postinst</em></p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>!/bin/sh</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>sed&nbsp;-i&nbsp;</span><span class=\"string quoted single shell\"><span class=\"punctuation definition string begin shell\"><span>&#39;</span></span><span>s/enforcing/permissive/</span><span class=\"punctuation definition string end shell\"><span>&#39;</span></span></span><span>&nbsp;/etc/selinux/config</span></span></div><div class=\"line\"><span class=\"source shell\"><span>fixfiles&nbsp;-F&nbsp;onboot</span></span></div></pre><p>Running <code>mkosi</code> again regenerates the image and runs the post-installer script\ninside the root fs before exeting.</p>\n<h3 id=\"step-4-booting-the-kernel-with-the-root-filesystem\">Step 4.  Booting the kernel with the root filesystem</h3>\n<p>I have everything I need now to test my patches and can boot the system to test\nit out:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source shell\"><span>qemu-kvm&nbsp;-kernel&nbsp;arch/x86_64/boot/bzImage&nbsp;\\</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-drive&nbsp;format=raw,file=image.raw</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-append&nbsp;</span><span class=\"string quoted double shell\"><span class=\"punctuation definition string begin shell\"><span>&quot;</span></span><span>root=/dev/sda1&nbsp;rw&nbsp;rootfstype=ext4&nbsp;console=ttyS0</span><span class=\"punctuation definition string end shell\"><span>&quot;</span></span></span><span>&nbsp;\\</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-m&nbsp;256M&nbsp;-curses</span></span></div></pre><p>The system doesn&#39;t take long to boot and I can see my changes almost\nimmediately.  Considering the initial build of the root fs and the kernel tree\nare the only long processes involved, I think it&#39;s quite a convenient way to\ntest kernel changes on a full-blown distro.</p>\n<p>From an already compiled kernel tree and built mkosi image I can apply my\npatches and see results in ~1m:</p>\n<script type=\"text/javascript\"\nsrc=\"https://asciinema.org/a/04ct05ku01kr9r87fwhbe33o8.js\"\nid=\"asciicast-04ct05ku01kr9r87fwhbe33o8\" async></script>\n\n<h3 id=\"additional-resources\">Additional Resources</h3>\n<ul>\n<li>mkosi - <a href=\"https://github.com/systemd/mkosi\">https://github.com/systemd/mkosi</a></li>\n<li>Virtualizing the running system - <a href=\"https://github.com/amluto/virtme\">https://github.com/amluto/virtme</a></li>\n<li>Debugging the kernel - <a href=\"http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel\">http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel</a></li>\n</ul>\n","readingTime":"5 min read","summary":"<p>I&#39;ve been interested in contributing to the kernel for a while now,\nand recently I&#39;ve been looking into the best workflow for doing that.  I&#39;d need\na quick way to build the kernel and test my changes.  Though, since I&#39;m mostly\ninterested in the SELinux subsystem I generally need a lot of userspace tools to\nuse with the kernel.</p>\n<p>Using mkosi from the systemd guys, I was able to quickly build a rootfs and boot\nmy compiled kernel with qemu.  This made it quite convenient to test my changes.\n"}